'''
Created on 14.5.2014

@author: Morzeux
'''

import functools
from Problems.Problem7 import _problem

def prime_times(num, val):
    """ Multiplies prime number. """
    i = 0
    j = val
    while val <= num / 2 and num % val == 0:
        i += 1
        val *= j
    return i

def _divisions(num, primes):
    """ Returns divisions of prime. """
    primes = [i for i in primes if num % i == 0 and i <= num / 2]
    divisers = [prime_times(num, i) + 1 for i in primes]
    return functools.reduce(lambda x, y: x * y, divisers, 1)

def problem(num=500):
    """
    The sequence of triangle numbers is generated by adding the natural
    numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6
    + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred
    divisors?
    """
    primes = _problem(num, num)
    i = 1
    j = 2
    while True:
        if _divisions(i + j, primes) >= num:
            return i + j
        i += j
        j += 1

    return None
